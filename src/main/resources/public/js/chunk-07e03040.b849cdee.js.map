{"version":3,"sources":["webpack:///./src/api/resource.js","webpack:///./src/pages/render.js","webpack:///./node_modules/mime-db/index.js","webpack:///./node_modules/mime-types/index.js"],"names":["__webpack_require__","d","__webpack_exports__","downloadResourceApi","getResourceUrlApi","_utils_request__WEBPACK_IMPORTED_MODULE_0__","mime","require","resourceId","request","get","params","responseType","then","res","data","console","log","blob","Blob","size","url","window","URL","createObjectURL","link","document","createElement","style","display","href","contentType","headers","download","extension","body","appendChild","click","revokeObjectURL","concat","process","entityText","e","name","id","scaleText","scale","salary","employeeStatusText","status","departmentStatusText","contractStatusText","positionStatusText","dateText","ds","Date","toLocaleString","monthText","dateObj","month","getUTCMonth","year","getUTCFullYear","module","exports","db","extname","EXTRACT_TYPE_REGEXP","TEXT_TYPE_REGEXP","charset","type","match","exec","toLowerCase","test","str","indexOf","lookup","exts","extensions","length","path","substr","types","populateMaps","preference","undefined","Object","keys","forEach","i","from","source","to","charsets","create"],"mappings":"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","file":"js/chunk-07e03040.b849cdee.js","sourcesContent":["import request from '@/utils/request'\r\n\r\nvar mime = require('mime-types');\r\n\r\nexport const downloadResourceApi = (resourceId) => {\r\n  return request.get(`/api/download/`, { params: { resourceId }, responseType: 'blob'}).then(res => {\r\n    if (!res.data)\r\n      return;\r\n    console.log() // Windows\r\n    const blob = new Blob([res.data]);\r\n    console.log(\"blob size=\", blob.size);\r\n\r\n    const url = window.URL.createObjectURL(blob);\r\n    const link = document.createElement('a');\r\n    link.style.display = 'none';\r\n    link.href = url;\r\n\r\n    const contentType = res.headers['content-type']\r\n    link.download = \"temp\" + ( ('.' + mime.extension(contentType)) || '')\r\n\r\n    document.body.appendChild(link);\r\n    link.click();\r\n    window.URL.revokeObjectURL(link.href)\r\n  })\r\n};\r\n\r\nexport const getResourceUrlApi = (resourceId) => {\r\n  return `${process.env.VUE_APP_BASE_API}/api/download/?resourceId=${resourceId}`\r\n}\r\n","export const entityText = (e) => {\r\n  return !!e ? `${e.name}(${e.id})` : '/';\r\n}\r\n\r\nexport const scaleText = (scale) => {\r\n  return !!scale ? `￥${scale.salary}(${scale.id})` : '/'\r\n};\r\n\r\nexport const employeeStatusText = (status) => {\r\n  return !!status ? '在职' : '离职'\r\n};\r\n\r\nexport const departmentStatusText = (status) => {\r\n  return !!status ? '正在生效' : '已撤销'\r\n};\r\n\r\nexport const contractStatusText = (status) => {\r\n  return !!status ? '正在生效' : '已终止'\r\n}\r\n\r\nexport const positionStatusText = departmentStatusText;\r\n\r\nexport const dateText = (ds) => {\r\n  return new Date(ds).toLocaleString()\r\n};\r\n\r\nexport const monthText = (ds) => {\r\n  const dateObj = new Date(ds);\r\n  const month = dateObj.getUTCMonth() + 1; //months from 1-12\r\n  const year = dateObj.getUTCFullYear();\r\n\r\n  return year + \"年 \" + month + \"月\"\r\n};\r\n\r\nexport const genderText = (g) => {\r\n  return g === 'M' ? '男' : '女'\r\n};\r\n","/*!\n * mime-db\n * Copyright(c) 2014 Jonathan Ong\n * MIT Licensed\n */\n\n/**\n * Module exports.\n */\n\nmodule.exports = require('./db.json')\n","/*!\n * mime-types\n * Copyright(c) 2014 Jonathan Ong\n * Copyright(c) 2015 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n'use strict'\n\n/**\n * Module dependencies.\n * @private\n */\n\nvar db = require('mime-db')\nvar extname = require('path').extname\n\n/**\n * Module variables.\n * @private\n */\n\nvar EXTRACT_TYPE_REGEXP = /^\\s*([^;\\s]*)(?:;|\\s|$)/\nvar TEXT_TYPE_REGEXP = /^text\\//i\n\n/**\n * Module exports.\n * @public\n */\n\nexports.charset = charset\nexports.charsets = { lookup: charset }\nexports.contentType = contentType\nexports.extension = extension\nexports.extensions = Object.create(null)\nexports.lookup = lookup\nexports.types = Object.create(null)\n\n// Populate the extensions/types maps\npopulateMaps(exports.extensions, exports.types)\n\n/**\n * Get the default charset for a MIME type.\n *\n * @param {string} type\n * @return {boolean|string}\n */\n\nfunction charset (type) {\n  if (!type || typeof type !== 'string') {\n    return false\n  }\n\n  // TODO: use media-typer\n  var match = EXTRACT_TYPE_REGEXP.exec(type)\n  var mime = match && db[match[1].toLowerCase()]\n\n  if (mime && mime.charset) {\n    return mime.charset\n  }\n\n  // default text/* to utf-8\n  if (match && TEXT_TYPE_REGEXP.test(match[1])) {\n    return 'UTF-8'\n  }\n\n  return false\n}\n\n/**\n * Create a full Content-Type header given a MIME type or extension.\n *\n * @param {string} str\n * @return {boolean|string}\n */\n\nfunction contentType (str) {\n  // TODO: should this even be in this module?\n  if (!str || typeof str !== 'string') {\n    return false\n  }\n\n  var mime = str.indexOf('/') === -1\n    ? exports.lookup(str)\n    : str\n\n  if (!mime) {\n    return false\n  }\n\n  // TODO: use content-type or other module\n  if (mime.indexOf('charset') === -1) {\n    var charset = exports.charset(mime)\n    if (charset) mime += '; charset=' + charset.toLowerCase()\n  }\n\n  return mime\n}\n\n/**\n * Get the default extension for a MIME type.\n *\n * @param {string} type\n * @return {boolean|string}\n */\n\nfunction extension (type) {\n  if (!type || typeof type !== 'string') {\n    return false\n  }\n\n  // TODO: use media-typer\n  var match = EXTRACT_TYPE_REGEXP.exec(type)\n\n  // get extensions\n  var exts = match && exports.extensions[match[1].toLowerCase()]\n\n  if (!exts || !exts.length) {\n    return false\n  }\n\n  return exts[0]\n}\n\n/**\n * Lookup the MIME type for a file path/extension.\n *\n * @param {string} path\n * @return {boolean|string}\n */\n\nfunction lookup (path) {\n  if (!path || typeof path !== 'string') {\n    return false\n  }\n\n  // get the extension (\"ext\" or \".ext\" or full path)\n  var extension = extname('x.' + path)\n    .toLowerCase()\n    .substr(1)\n\n  if (!extension) {\n    return false\n  }\n\n  return exports.types[extension] || false\n}\n\n/**\n * Populate the extensions and types maps.\n * @private\n */\n\nfunction populateMaps (extensions, types) {\n  // source preference (least -> most)\n  var preference = ['nginx', 'apache', undefined, 'iana']\n\n  Object.keys(db).forEach(function forEachMimeType (type) {\n    var mime = db[type]\n    var exts = mime.extensions\n\n    if (!exts || !exts.length) {\n      return\n    }\n\n    // mime -> extensions\n    extensions[type] = exts\n\n    // extension -> mime\n    for (var i = 0; i < exts.length; i++) {\n      var extension = exts[i]\n\n      if (types[extension]) {\n        var from = preference.indexOf(db[types[extension]].source)\n        var to = preference.indexOf(mime.source)\n\n        if (types[extension] !== 'application/octet-stream' &&\n          (from > to || (from === to && types[extension].substr(0, 12) === 'application/'))) {\n          // skip the remapping\n          continue\n        }\n      }\n\n      // set the extension -> mime\n      types[extension] = type\n    }\n  })\n}\n"],"sourceRoot":""}